
# Tablero de R Studio 

# Primeros comandos en R 

# Puedes escribir comentarios en R, como este, anteponiendo un "#", los comentarios son de utilidad para que puedas dar m√°s
# detalles sobre tu codigo. 

# Vectores en R 

# Para crear vectores en R utilizamos el comando c()

c(1,2,3,4)

# Si queremos definir el vector, utilizamos <- o =

age <- c(10,20,22,14,15)

# Si corremos el nombre del voctor, el tablero muestra sus elementos 

age 

# Podemos hacer algunos c?lculos b?sicos con esta matriz: Promedio, desviaci?n estandar, suma

# Promedio

mean(age)

# Desviacion estandar 

sd(age)

# Creamos otra variable que puede servir para compararla con la matrix age 

weight <- c(60,65,55,65,70)

# Calculamos correlaciones entre los dos vectores 

cor(age,weight)

# Graficaos

plot(age,weight)

# Working Directory 

# Una parte importante de programar en R es definir el working directory, esto es, la carpeta pivote donde 
#R obtendr? informaci?n y archivos, as? como donde se guardar?n los productos del c?digo (mapas, gr?ficas, 
# archivos csv, entre otros.)

# Primero podemos ver donde est? localizado nuestro working directory:

getwd()

# Luego podemos definir nuestro wd a trav?s del siguiente comando: 

setwd("/Users/alexmoreno/Library/Mobile Documents/com~apple~CloudDocs/R_Scripts/")

# Tambien podemos identificar el wd y definirlo de manera manual a trav?s del cuadrante inferior derecho en R Studio...

# Podemos enlistar los objetos que tenemos en nuestro environment, que se puede identificar en el cuadrante superior derecho
# en el tablero de R Studio 

ls()

# Eliminamos alguno(s) de los ejemplos a trav?s del comando, por ejemplo, eliminamos 'age':

rm(age)

# Podemos guardar el enviroment a trav?s del siguiente comando o de manera manual en el cuadrante superior derecho: 

save.image("ejemplo_1.RData")

# Si vamos a nuestro wd podremos ver que se encuentra el archivo en formato RData

# Podemos eliminar el enviroment y utilizar el siguiente comando para cargar el archivo RData guardado

load("ejemplo_1.RData")

# PAQUETES EN R 

# Los paquetes e R son conjuntos de funciones que facilitan la programaci?n 

# En R Studio, vamos al cuadrante inferior derecho y damos clic en packages, ahi podemos ver los paquetes que tenemos
#instalados. En mi caso hay varios, ya que previamente e instalado los paquetes que requiero para mis c?digos. Sin embargo, 
# estos no aparecen inicialmente. Para instalar un paquete podemos hacerlo manualmente, a trav?s de la pesta?a "Install" que 
# se encuentra en el cuadrante se?alado; o a trav?s del comando install.packages()

#Por ejemplo, instalamos el paquete base

install.packages("dplyr")

# Despues, para poder usarlo, lo llamamos a trav?s del siguiente comando: 

library("dplyr")

# Podemos obtener informacion sobre el paquete a trav?s de: 

library( help= "dplyr")

### DATA SETS

# Existen seis tipos de objetos en R que pueden contener datos: vectores, matrices, arrays, data frames y lists.
# A continuaci?n veremos las diferencias entre ellos, y como programarlos en R

## Vectores: son conjuntos de una dimensi?n, pueden conformarse de n?meros, caracteres o entradas l?gidas (Falso o verdero)

# Vectores num?ricos

a <- c(10,20,30,40)

# Vectores de caracteres

b <- c("A","B","B","C")

# Vectores l?gicos

c <- c(TRUE,FALSE,FALSE,TRUE)

# Podemos crear subsets de los vectores creados. Por ejemplo:

a_1 <- a[1:3]  # En este caso, creamos un nuevo vector que est? integrado por los tres primeros elementos del vector 'a'

a_2 <- a[c(1,3:4)] # En este caso, creamos otro vector, que est? integrado por el primer, tercer y cuarto elemento, para ello
# usamos c() para tener esta secuencia

## Matrices

# Las matrices son conjuntos de dos dimensiones. Se crean a trav?s de la funci?n matrix()
# Como en el caso de los vectores, existen matrices num?ricas, de caracteres y l?gicas. 

# Ejemplo: Creamos una matriz de 3X4

Matrix_A <- matrix(1:12,nrow = 3,ncol = 4) # De manera automatica, el comando nos orden? por columna

# Podemos ordenar por fila usando byrow = TRUE

Matrix_B <- matrix(1:12,nrow = 3,ncol = 4,byrow = TRUE)

# Podemos crear subsets ahora con las dos dimensiones, la logica es similar a los vectores, usando los corchetes, solo que ahora,
# al ser dos domensiones, la ?gica es la siguiente [filas,columnas]. Por ejemplo:

# Creamos una matriz que est? conformada por las 2 primeras filas y las 3 primeras columnas

Matrix_A_2 <- Matrix_A[1:2,1:3]

# Podemos considerar la segunda columna de la matriz 

Matrix_A_3 <- matrix(Matrix_A[,2]) 

## Arrays

#  Son matrices de m?s de dos dimensiones. 

# Vemos los elementos necesarios para su construcci?n

?array

#Creamos los dimnames

dim1 <- c("A1", "A2","A3", "A4")

dim2 <- c("B1", "B2","B3", "B4")

dim3 <- c("C1", "C2","C3", "C4")

# Ahora generamos un array 

array_1 <- array(1:64, c(4,4,4), dimnames = list(dim1,dim2,dim3))

array_1

## Data frames

# Los data frames son conjuntos de vectores que pueden ser de distintos tipis: num?ricos, caracteres o l?gicos
# Por ejemplo:

df_1 <- data.frame(c(10,20,10,30),c("A","B","C","D"),c(TRUE,TRUE,FALSE,FALSE))

# O podemos usar los vectores que ya construimos: 

df_2 <- data.frame(a,b,c)

# Podemos identificar los nombres de las columnas con: 

names(df_2)

# Modificamos los nombres de las columnas:

names(df_2) <- c("Columna_A","Columna_B","Columna_C")

# Obtenemos los nombres de las filas

row.names(df_2)

#Llamamos a una columna del DF con: 

df_2$Columna_A

# Obtenemos la estructura del data frame:

str(df_2)

# Obtenemos las primeras filas del DF:

head(df_2)

# Obtenemos las ?ltimas filas del DF: 

# We can cross the information of two columns: 

table(df_2$Columna_A,df_2$Columna_B)

# Las funciones attach() y detach() facilitan el llamado de columnas dentro de un data frame. 

# Por ejemplo: 

summary(mtcars$mpg)
plot(mtcars$mpg, mtcars$disp)
plot(mtcars$mpg, mtcars$wt)

# Las siguientes lineas dan el mismo resultados (attach abre el proceso y detach lo cierra)

attach(mtcars)
summary(mpg)
plot(mpg, disp)
plot(mpg, wt)
detach(mtcars)

# Otra forma para tener un resultado similar es utilizando with():

with(mtcars, {
  print(summary(mpg))
  plot(mpg, disp)
  plot(mpg, wt)
})

## Factors

patientID <- c(1, 2, 3, 4)

age <- c(25, 34, 28, 52)

diabetes <- c("Type1", "Type2", "Type1", "Type1")

status <- c("Poor", "Improved", "Excellent", "Poor")

# Convertimos con factor 
diabetes_a <- factor(diabetes)

# Convertimos con factor
status_a <- factor(status, order=TRUE)

# Primero vemos como resume R un DF sin factors

patientdata <- data.frame(patientID, age, diabetes, status)

summary(patientdata)

# Ahora usando factors

patientdata_a <- data.frame(patientID, age, diabetes_a, status_a)

summary(patientdata_a)

# Listas en R 

# Una lista es una colecci?n de objetos (vectores, matrices, arrays)

# Por ejemplo: 

mylist <- list(title="My_List", ages= c(10, 20, 30, 40),  matrix = matrix(1:4, nrow=2), third_column = c("one", "two", "three"))

#Obtenemos el segundo componente

mylist[[2]]

# O por el nombre del componente... 

mylist$ages
